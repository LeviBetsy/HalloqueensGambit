/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package halloqueensgambit.java;
import halloqueensgambit.java.Game.*;
import halloqueensgambit.java.piece.*;

import java.util.Optional;

import static halloqueensgambit.java.Side.WHITE;
import static halloqueensgambit.java.Side.BLACK;
import java.io.IOException;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class App {
    public String getGreeting(){
        return "a";
    }
    public void printNextGames(Game game){
        var lst = game.allNextGames();
        System.out.println("ALL NEXT GAME:");
        for (var g : lst){
            System.out.println();
            System.out.println(g);
        }
    }
    public static void main(String[] args) throws IOException {
        String fileName;
        if (args.length == 0){
            fileName = "initialGame.txt";
        } else {
            fileName = args[0];
        }
        Game game = scanGame(fileName);
        System.out.println(game);
        System.out.println();
        new App().printNextGames(game);
    }
    /*                                IO TO SCAN GAME FROM TXT FILES                               */

    public static Game scanGame(String fileName) throws IOException {
        // Resolve the file path
        String currentDirectory = System.getProperty("user.dir");
        // Connect the filepath
        Path filePath = Paths.get(currentDirectory, "src/main/java/halloqueensgambit/java/games", fileName);
        Scanner scanner = new Scanner(filePath);

        Side side = (scanner.nextLine().equals("B")) ? BLACK : WHITE;
        Board b = new Board();

        for (int y = 8; y >= 1; y--){
            String row = scanner.nextLine();
            //TODO: maybe throw error for index out of bound
            //splitting a row into individual squares
            String[] squares = row.split("\\s+");
            for (int x = 1; x <= 8; x++){
                Optional<Piece> currentPiece = scanPiece(squares[x - 1], new Pos(x,y));
                //if scan Piece does not return an Optional value
                if (currentPiece.isPresent()){
                    b.addToBoard(new Pos(x,y), currentPiece.get());
                }
            }
        }
        return new Game(side, b);
    }

    private static Optional<Piece> scanPiece(String c, Pos pos){
        return switch (c) {
            case "R" -> Optional.of(new Rook(WHITE, pos,false));
            case "r" -> Optional.of(new Rook(BLACK, pos,false));
            case "N" -> Optional.of(new Knight(WHITE, pos));
            case "n" -> Optional.of(new Knight(BLACK, pos));
            case "B" -> Optional.of(new Bishop(WHITE, pos));
            case "b" -> Optional.of(new Bishop(BLACK, pos));
            case "K" -> Optional.of(new King(WHITE, pos,false));
            case "k" -> Optional.of(new King(BLACK, pos, false));
            case "Q" -> Optional.of(new Queen(WHITE, pos));
            case "q" -> Optional.of(new Queen(BLACK, pos));
            case "P" -> Optional.of(new Pawn(WHITE, pos));
            case "p" -> Optional.of(new Pawn(BLACK, pos));
            default -> Optional.empty();
        };
    }
}
