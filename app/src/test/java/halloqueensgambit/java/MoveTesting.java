/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package halloqueensgambit.java;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.Optional;

import org.junit.jupiter.api.Test;

import halloqueensgambit.java.piece.Piece;

class MoveTesting {
    @Test void testBasic(){
        String fileName = "/bestmove/a.txt";
        Game game = IO.readGameFromFile(fileName);

        ArrayList<Move> moves = game.getLegalMoves();
        
        Game tmp = IO.readGameFromFile(fileName);
        assertEquals(game.board(), tmp.board());
        
        for(Move m: moves){
            Optional<Piece> captured = tmp.makeMove(m);
            tmp.unMakeMove(m, captured);
            System.out.println(m.start + " " + m.end + " ");
            assertEquals(game, tmp);
        }
    }

    @Test void testUnCastling(){
        Game white = new Game("r3k2r/pbp2pp1/1p3q1p/2n1p3/8/P2B1N2/1PP1QPPP/R3K2R w KQkq - 0 14");
        Game white_copy = new Game("r3k2r/pbp2pp1/1p3q1p/2n1p3/8/P2B1N2/1PP1QPPP/R3K2R w KQkq - 0 14");
        Game black = new Game("r3k2r/pbp2pp1/1p3q1p/2n1p3/8/P2B1N2/1PP1QPPP/R3K2R b KQkq - 0 14");
        Game black_copy = new Game("r3k2r/pbp2pp1/1p3q1p/2n1p3/8/P2B1N2/1PP1QPPP/R3K2R b KQkq - 0 14");

        ArrayList<Move> white_moves = white.getLegalMoves();
        ArrayList<Move> black_moves = black.getLegalMoves();

        for(Move m: white_moves){
            Optional<Piece> captured = white_copy.makeMove(m);
            white_copy.unMakeMove(m, captured);
            System.out.println(m.start + " " + m.end + " ");
            assertEquals(white, white_copy);
        }

        for(Move m: black_moves){
            Optional<Piece> captured = black_copy.makeMove(m);
            black_copy.unMakeMove(m, captured);
            System.out.println(m.start + " " + m.end + " ");
            assertEquals(black, black_copy);
        }

    }

    @Test void testUnPromotion(){
        Game white = new Game("8/4PPPP/6K1/8/8/1k6/pppp4/8 w - - 0 1");
        Game white_copy = new Game("8/4PPPP/6K1/8/8/1k6/pppp4/8 w - - 0 1");
        Game black = new Game("8/4PPPP/6K1/8/8/1k6/pppp4/8 b - - 0 1");
        Game black_copy = new Game("8/4PPPP/6K1/8/8/1k6/pppp4/8 b - - 0 1");

        ArrayList<Move> white_moves = white.getLegalMoves();
        ArrayList<Move> black_moves = black.getLegalMoves();

        for(Move m: white_moves){
            Optional<Piece> captured = white_copy.makeMove(m);
            System.out.println(white_copy.toString());
            white_copy.unMakeMove(m, captured);
            System.out.println(m.start + " " + m.end + " ");
            assertEquals(white, white_copy);
        }

        for(Move m: black_moves){
            Optional<Piece> captured = black_copy.makeMove(m);
            black_copy.unMakeMove(m, captured);
            System.out.println(m.start + " " + m.end + " ");
            assertEquals(black, black_copy);
        }

    }

    @Test void unMakePromotion(){
        Game game = IO.readGameFromFile("mateIn1aa.txt");
        Move takeKingPromote = new Move(new Game.Pos(7,7), new Game.Pos(8,8), true);
        var temp = game.makeMove(takeKingPromote);
        assertEquals(new Game("1r5Q/4RK1n/7P/8/8/1p6/p7/8 b - - 0 1"), game);
        game.unMakeMove(takeKingPromote, temp);
        assertEquals(new Game("1r5k/4RKPn/7P/8/8/1p6/p7/8 w - - 0 1"), game);
    }

}